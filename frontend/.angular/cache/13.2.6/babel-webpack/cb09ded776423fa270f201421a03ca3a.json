{"ast":null,"code":"import { __awaiter } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Injectable, Inject, Directive, Input, NgModule, Optional, SkipSelf } from '@angular/core';\nimport { BehaviorSubject, ReplaySubject, AsyncSubject, isObservable } from 'rxjs';\nimport { skip, filter, take } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\n\nclass BaseLoginProvider {\n  constructor() {}\n\n  loadScript(id, src, onload, parentElement = null) {\n    // get document if platform is only browser\n    if (typeof document !== 'undefined' && !document.getElementById(id)) {\n      let signInJS = document.createElement('script');\n      signInJS.async = true;\n      signInJS.src = src;\n      signInJS.onload = onload;\n\n      if (!parentElement) {\n        parentElement = document.head;\n      }\n\n      parentElement.appendChild(signInJS);\n    }\n  }\n\n}\n\nclass SocialUser {}\n\nconst defaultInitOptions = {\n  oneTapEnabled: true\n};\n\nclass GoogleLoginProvider extends BaseLoginProvider {\n  constructor(clientId, initOptions) {\n    super();\n    this.clientId = clientId;\n    this.initOptions = initOptions;\n    this.changeUser = new EventEmitter();\n    this._socialUser = new BehaviorSubject(null);\n    this._accessToken = new BehaviorSubject(null);\n    this._receivedAccessToken = new EventEmitter();\n    this.initOptions = Object.assign(Object.assign({}, defaultInitOptions), this.initOptions); // emit changeUser events but skip initial value from behaviorSubject\n\n    this._socialUser.pipe(skip(1)).subscribe(this.changeUser); // emit receivedAccessToken but skip initial value from behaviorSubject\n\n\n    this._accessToken.pipe(skip(1)).subscribe(this._receivedAccessToken);\n  }\n\n  initialize(autoLogin) {\n    return new Promise((resolve, reject) => {\n      try {\n        this.loadScript(GoogleLoginProvider.PROVIDER_ID, 'https://accounts.google.com/gsi/client', () => {\n          var _a;\n\n          google.accounts.id.initialize({\n            client_id: this.clientId,\n            auto_select: autoLogin,\n            callback: ({\n              credential\n            }) => {\n              const socialUser = this.createSocialUser(credential);\n\n              this._socialUser.next(socialUser);\n            },\n            prompt_parent_id: (_a = this.initOptions) === null || _a === void 0 ? void 0 : _a.prompt_parent_id,\n            itp_support: this.initOptions.oneTapEnabled\n          });\n\n          if (this.initOptions.oneTapEnabled) {\n            this._socialUser.pipe(filter(user => user === null)).subscribe(() => google.accounts.id.prompt(console.debug));\n          }\n\n          if (this.initOptions.scopes) {\n            const scope = this.initOptions.scopes instanceof Array ? this.initOptions.scopes.filter(s => s).join(' ') : this.initOptions.scopes;\n            this._tokenClient = google.accounts.oauth2.initTokenClient({\n              client_id: this.clientId,\n              scope,\n              prompt: this.initOptions.prompt,\n              callback: tokenResponse => {\n                if (tokenResponse.error) {\n                  this._accessToken.error({\n                    code: tokenResponse.error,\n                    description: tokenResponse.error_description,\n                    uri: tokenResponse.error_uri\n                  });\n                } else {\n                  this._accessToken.next(tokenResponse.access_token);\n                }\n              }\n            });\n          }\n\n          resolve();\n        });\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  getLoginStatus() {\n    return new Promise((resolve, reject) => {\n      if (this._socialUser.value) {\n        resolve(this._socialUser.value);\n      } else {\n        reject(`No user is currently logged in with ${GoogleLoginProvider.PROVIDER_ID}`);\n      }\n    });\n  }\n\n  refreshToken() {\n    return new Promise((resolve, reject) => {\n      google.accounts.id.revoke(this._socialUser.value.id, response => {\n        if (response.error) reject(response.error);else resolve(this._socialUser.value);\n      });\n    });\n  }\n\n  getAccessToken() {\n    return new Promise((resolve, reject) => {\n      var _a;\n\n      if (!this._tokenClient) {\n        if (this._socialUser.value) {\n          reject('No token client was instantiated, you should specify some scopes.');\n        } else {\n          reject('You should be logged-in first.');\n        }\n      } else {\n        this._tokenClient.requestAccessToken({\n          hint: (_a = this._socialUser.value) === null || _a === void 0 ? void 0 : _a.email\n        });\n\n        this._receivedAccessToken.pipe(take(1)).subscribe(resolve);\n      }\n    });\n  }\n\n  revokeAccessToken() {\n    return new Promise((resolve, reject) => {\n      if (!this._tokenClient) {\n        reject('No token client was instantiated, you should specify some scopes.');\n      } else if (!this._accessToken.value) {\n        reject('No access token to revoke');\n      } else {\n        google.accounts.oauth2.revoke(this._accessToken.value, () => {\n          this._accessToken.next(null);\n\n          resolve();\n        });\n      }\n    });\n  }\n\n  signIn() {\n    return Promise.reject('You should not call this method directly for Google, use \"<asl-google-signin-button>\" wrapper ' + 'or generate the button yourself with \"google.accounts.id.renderButton()\" ' + '(https://developers.google.com/identity/gsi/web/guides/display-button#javascript)');\n  }\n\n  signOut() {\n    return __awaiter(this, void 0, void 0, function* () {\n      google.accounts.id.disableAutoSelect();\n\n      this._socialUser.next(null);\n    });\n  }\n\n  createSocialUser(idToken) {\n    const user = new SocialUser();\n    user.idToken = idToken;\n    const payload = this.decodeJwt(idToken);\n    user.id = payload.sub;\n    user.name = payload.name;\n    user.email = payload.email;\n    user.photoUrl = payload.picture;\n    user.firstName = payload['given_name'];\n    user.lastName = payload['family_name'];\n    return user;\n  }\n\n  decodeJwt(idToken) {\n    const base64Url = idToken.split(\".\")[1];\n    const base64 = base64Url.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    const jsonPayload = decodeURIComponent(window.atob(base64).split(\"\").map(function (c) {\n      return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\n    }).join(\"\"));\n    return JSON.parse(jsonPayload);\n  }\n\n}\n\nGoogleLoginProvider.PROVIDER_ID = 'GOOGLE';\n/**\r\n * The service encapsulating the social login functionality. Exposes methods like\r\n * `signIn`, `signOut`. Also, exposes an `authState` `Observable` that one can\r\n * subscribe to get the current logged in user information.\r\n *\r\n * @dynamic\r\n */\n\nclass SocialAuthService {\n  /**\r\n   * @param config A `SocialAuthServiceConfig` object or a `Promise` that resolves to a `SocialAuthServiceConfig` object\r\n   */\n  constructor(config, _ngZone, _injector) {\n    this._ngZone = _ngZone;\n    this._injector = _injector;\n    this.providers = new Map();\n    this.autoLogin = false;\n    this._user = null;\n    this._authState = new ReplaySubject(1);\n    /* Consider making this an enum comprising LOADING, LOADED, FAILED etc. */\n\n    this.initialized = false;\n    this._initState = new AsyncSubject();\n\n    if (config instanceof Promise) {\n      config.then(config => {\n        this.initialize(config);\n      });\n    } else {\n      this.initialize(config);\n    }\n  }\n  /** An `Observable` that one can subscribe to get the current logged in user information */\n\n\n  get authState() {\n    return this._authState.asObservable();\n  }\n  /** An `Observable` to communicate the readiness of the service and associated login providers */\n\n\n  get initState() {\n    return this._initState.asObservable();\n  }\n\n  initialize(config) {\n    this.autoLogin = config.autoLogin !== undefined ? config.autoLogin : false;\n    const {\n      onError = console.error\n    } = config;\n    config.providers.forEach(item => {\n      this.providers.set(item.id, 'prototype' in item.provider ? this._injector.get(item.provider) : item.provider);\n    });\n    Promise.all(Array.from(this.providers.values()).map(provider => provider.initialize(this.autoLogin))).then(() => {\n      if (this.autoLogin) {\n        const loginStatusPromises = [];\n        let loggedIn = false;\n        this.providers.forEach((provider, key) => {\n          const promise = provider.getLoginStatus();\n          loginStatusPromises.push(promise);\n          promise.then(user => {\n            this.setUser(user, key);\n            loggedIn = true;\n          }).catch(console.debug);\n        });\n        Promise.all(loginStatusPromises).catch(() => {\n          if (!loggedIn) {\n            this._user = null;\n\n            this._authState.next(null);\n          }\n        });\n      }\n\n      this.providers.forEach((provider, key) => {\n        if (isObservable(provider.changeUser)) {\n          provider.changeUser.subscribe(user => {\n            this._ngZone.run(() => {\n              this.setUser(user, key);\n            });\n          });\n        }\n      });\n    }).catch(error => {\n      onError(error);\n    }).finally(() => {\n      this.initialized = true;\n\n      this._initState.next(this.initialized);\n\n      this._initState.complete();\n    });\n  }\n\n  getAccessToken(providerId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const providerObject = this.providers.get(providerId);\n\n      if (!this.initialized) {\n        throw SocialAuthService.ERR_NOT_INITIALIZED;\n      } else if (!providerObject) {\n        throw SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND;\n      } else if (!(providerObject instanceof GoogleLoginProvider)) {\n        throw SocialAuthService.ERR_NOT_SUPPORTED_FOR_ACCESS_TOKEN;\n      }\n\n      return yield providerObject.getAccessToken();\n    });\n  }\n\n  refreshAuthToken(providerId) {\n    return new Promise((resolve, reject) => {\n      if (!this.initialized) {\n        reject(SocialAuthService.ERR_NOT_INITIALIZED);\n      } else {\n        const providerObject = this.providers.get(providerId);\n\n        if (providerObject) {\n          if (typeof providerObject.refreshToken !== 'function') {\n            reject(SocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN);\n          } else {\n            providerObject.refreshToken().then(user => {\n              this.setUser(user, providerId);\n              resolve();\n            }).catch(err => {\n              reject(err);\n            });\n          }\n        } else {\n          reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n        }\n      }\n    });\n  }\n\n  refreshAccessToken(providerId) {\n    return new Promise((resolve, reject) => {\n      if (!this.initialized) {\n        reject(SocialAuthService.ERR_NOT_INITIALIZED);\n      } else if (providerId !== GoogleLoginProvider.PROVIDER_ID) {\n        reject(SocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN);\n      } else {\n        const providerObject = this.providers.get(providerId);\n\n        if (providerObject instanceof GoogleLoginProvider) {\n          providerObject.revokeAccessToken().then(resolve).catch(reject);\n        } else {\n          reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n        }\n      }\n    });\n  }\n  /**\r\n   * A method used to sign in a user with a specific `LoginProvider`.\r\n   *\r\n   * @param providerId Id with which the `LoginProvider` has been registered with the service\r\n   * @param signInOptions Optional `LoginProvider` specific arguments\r\n   * @returns A `Promise` that resolves to the authenticated user information\r\n   */\n\n\n  signIn(providerId, signInOptions) {\n    return new Promise((resolve, reject) => {\n      if (!this.initialized) {\n        reject(SocialAuthService.ERR_NOT_INITIALIZED);\n      } else {\n        let providerObject = this.providers.get(providerId);\n\n        if (providerObject) {\n          providerObject.signIn(signInOptions).then(user => {\n            this.setUser(user, providerId);\n            resolve(user);\n          }).catch(err => {\n            reject(err);\n          });\n        } else {\n          reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n        }\n      }\n    });\n  }\n  /**\r\n   * A method used to sign out the currently loggen in user.\r\n   *\r\n   * @param revoke Optional parameter to specify whether a hard sign out is to be performed\r\n   * @returns A `Promise` that resolves if the operation is successful, rejects otherwise\r\n   */\n\n\n  signOut(revoke = false) {\n    return new Promise((resolve, reject) => {\n      if (!this.initialized) {\n        reject(SocialAuthService.ERR_NOT_INITIALIZED);\n      } else if (!this._user) {\n        reject(SocialAuthService.ERR_NOT_LOGGED_IN);\n      } else {\n        let providerId = this._user.provider;\n        let providerObject = this.providers.get(providerId);\n\n        if (providerObject) {\n          providerObject.signOut(revoke).then(() => {\n            resolve();\n            this.setUser(null);\n          }).catch(err => {\n            reject(err);\n          });\n        } else {\n          reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n        }\n      }\n    });\n  }\n\n  setUser(user, id) {\n    if (user && id) user.provider = id;\n    this._user = user;\n\n    this._authState.next(user);\n  }\n\n}\n\nSocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND = 'Login provider not found';\nSocialAuthService.ERR_NOT_LOGGED_IN = 'Not logged in';\nSocialAuthService.ERR_NOT_INITIALIZED = 'Login providers not ready yet. Are there errors on your console?';\nSocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN = 'Chosen login provider is not supported for refreshing a token';\nSocialAuthService.ERR_NOT_SUPPORTED_FOR_ACCESS_TOKEN = 'Chosen login provider is not supported for getting an access token';\n\nSocialAuthService.ɵfac = function SocialAuthService_Factory(t) {\n  return new (t || SocialAuthService)(i0.ɵɵinject('SocialAuthServiceConfig'), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i0.Injector));\n};\n\nSocialAuthService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: SocialAuthService,\n  factory: SocialAuthService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SocialAuthService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: ['SocialAuthServiceConfig']\n      }]\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i0.Injector\n    }];\n  }, null);\n})();\n\nclass GoogleSigninButtonDirective {\n  constructor(el, socialAuthService) {\n    this.type = 'icon';\n    this.size = 'medium';\n    this.text = 'signin_with';\n    this.shape = 'rectangular';\n    this.theme = 'outline';\n    this.logo_alignment = 'left';\n    this.width = '';\n    this.locale = '';\n    socialAuthService.initState.pipe(take(1)).subscribe(() => {\n      Promise.resolve(this.width).then(value => {\n        if (value > '400' || value < '200' && value != '') {\n          Promise.reject('Please note .. max-width 400 , min-width 200 ' + '(https://developers.google.com/identity/gsi/web/tools/configurator)');\n        } else {\n          google.accounts.id.renderButton(el.nativeElement, {\n            type: this.type,\n            size: this.size,\n            text: this.text,\n            width: this.width,\n            shape: this.shape,\n            theme: this.theme,\n            logo_alignment: this.logo_alignment,\n            locale: this.locale\n          });\n        }\n      });\n    });\n  }\n\n}\n\nGoogleSigninButtonDirective.ɵfac = function GoogleSigninButtonDirective_Factory(t) {\n  return new (t || GoogleSigninButtonDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(SocialAuthService));\n};\n\nGoogleSigninButtonDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: GoogleSigninButtonDirective,\n  selectors: [[\"asl-google-signin-button\"]],\n  inputs: {\n    type: \"type\",\n    size: \"size\",\n    text: \"text\",\n    shape: \"shape\",\n    theme: \"theme\",\n    logo_alignment: \"logo_alignment\",\n    width: \"width\",\n    locale: \"locale\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GoogleSigninButtonDirective, [{\n    type: Directive,\n    args: [{\n      // eslint-disable-next-line @angular-eslint/directive-selector\n      selector: 'asl-google-signin-button'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: SocialAuthService\n    }];\n  }, {\n    type: [{\n      type: Input\n    }],\n    size: [{\n      type: Input\n    }],\n    text: [{\n      type: Input\n    }],\n    shape: [{\n      type: Input\n    }],\n    theme: [{\n      type: Input\n    }],\n    logo_alignment: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    locale: [{\n      type: Input\n    }]\n  });\n})();\n/**\r\n * The main module of angularx-social-login library.\r\n */\n\n\nclass SocialLoginModule {\n  constructor(parentModule) {\n    if (parentModule) {\n      throw new Error('SocialLoginModule is already loaded. Import it in the AppModule only');\n    }\n  }\n\n  static initialize(config) {\n    return {\n      ngModule: SocialLoginModule,\n      providers: [SocialAuthService, {\n        provide: 'SocialAuthServiceConfig',\n        useValue: config\n      }]\n    };\n  }\n\n}\n\nSocialLoginModule.ɵfac = function SocialLoginModule_Factory(t) {\n  return new (t || SocialLoginModule)(i0.ɵɵinject(SocialLoginModule, 12));\n};\n\nSocialLoginModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: SocialLoginModule\n});\nSocialLoginModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [SocialAuthService],\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SocialLoginModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [GoogleSigninButtonDirective],\n      imports: [CommonModule],\n      providers: [SocialAuthService],\n      exports: [GoogleSigninButtonDirective]\n    }]\n  }], function () {\n    return [{\n      type: SocialLoginModule,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }];\n  }, null);\n})(); // Simulates login / logout without actually requiring an Internet connection.\n//\n// Useful for certain development situations.\n//\n// For example, if you want to simulate the greatest football referee England has ever produced:\n//\n//  const dummyUser: SocialUser = {\n//     id: '0123456789',\n//     name: 'Howard Webb',\n//     email: 'howard@webb.com',\n//     firstName: 'Howard',\n//     lastName: 'Webb',\n//     authToken: 'dummyAuthToken',\n//     photoUrl: 'https://en.wikipedia.org/wiki/Howard_Webb#/media/File:Howard_Webb_march11.jpg',\n//     provider: 'DUMMY',\n//     idToken: 'dummyIdToken',\n//     authorizationCode: 'dummyAuthCode'\n// };\n//\n//  let config = new AuthServiceConfig([\n//  { ... },\n//  {\n//       id: DummyLoginProvider.PROVIDER_ID,\n//       provider: new DummyLoginProvider(dummyUser)  // Pass your user into the constructor\n//   },\n//  { ... }\n//  ]);\n\n\nclass DummyLoginProvider extends BaseLoginProvider {\n  constructor(dummy) {\n    super();\n\n    if (dummy) {\n      this.dummy = dummy;\n    } else {\n      this.dummy = DummyLoginProvider.DEFAULT_USER;\n    } // Start not logged in\n\n\n    this.loggedIn = false;\n  }\n\n  getLoginStatus() {\n    return new Promise((resolve, reject) => {\n      if (this.loggedIn) {\n        resolve(this.dummy);\n      } else {\n        reject('No user is currently logged in.');\n      }\n    });\n  }\n\n  initialize() {\n    return new Promise((resolve, reject) => {\n      resolve();\n    });\n  }\n\n  signIn() {\n    return new Promise((resolve, reject) => {\n      this.loggedIn = true;\n      resolve(this.dummy);\n    });\n  }\n\n  signOut(revoke) {\n    return new Promise((resolve, reject) => {\n      this.loggedIn = false;\n      resolve();\n    });\n  }\n\n}\n\nDummyLoginProvider.PROVIDER_ID = 'DUMMY';\nDummyLoginProvider.DEFAULT_USER = {\n  id: '1234567890',\n  name: 'Mickey Mouse',\n  email: 'mickey@mouse.com',\n  firstName: 'Mickey',\n  lastName: 'Mouse',\n  authToken: 'dummyAuthToken',\n  photoUrl: 'https://en.wikipedia.org/wiki/File:Mickey_Mouse.png',\n  provider: 'DUMMY',\n  idToken: 'dummyIdToken',\n  authorizationCode: 'dummyAuthCode',\n  response: {}\n};\n\nclass FacebookLoginProvider extends BaseLoginProvider {\n  constructor(clientId, initOptions = {}) {\n    super();\n    this.clientId = clientId;\n    this.requestOptions = {\n      scope: 'email,public_profile',\n      locale: 'en_US',\n      fields: 'name,email,picture,first_name,last_name',\n      version: 'v10.0'\n    };\n    this.requestOptions = Object.assign(Object.assign({}, this.requestOptions), initOptions);\n  }\n\n  initialize() {\n    return new Promise((resolve, reject) => {\n      try {\n        this.loadScript(FacebookLoginProvider.PROVIDER_ID, `//connect.facebook.net/${this.requestOptions.locale}/sdk.js`, () => {\n          FB.init({\n            appId: this.clientId,\n            autoLogAppEvents: true,\n            cookie: true,\n            xfbml: true,\n            version: this.requestOptions.version\n          });\n          resolve();\n        });\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  getLoginStatus() {\n    return new Promise((resolve, reject) => {\n      FB.getLoginStatus(response => {\n        if (response.status === 'connected') {\n          let authResponse = response.authResponse;\n          FB.api(`/me?fields=${this.requestOptions.fields}`, fbUser => {\n            let user = new SocialUser();\n            user.id = fbUser.id;\n            user.name = fbUser.name;\n            user.email = fbUser.email;\n            user.photoUrl = 'https://graph.facebook.com/' + fbUser.id + '/picture?type=normal&access_token=' + authResponse.accessToken;\n            user.firstName = fbUser.first_name;\n            user.lastName = fbUser.last_name;\n            user.authToken = authResponse.accessToken;\n            user.response = fbUser;\n            resolve(user);\n          });\n        } else {\n          reject(`No user is currently logged in with ${FacebookLoginProvider.PROVIDER_ID}`);\n        }\n      });\n    });\n  }\n\n  signIn(signInOptions) {\n    const options = Object.assign(Object.assign({}, this.requestOptions), signInOptions);\n    return new Promise((resolve, reject) => {\n      FB.login(response => {\n        if (response.authResponse) {\n          let authResponse = response.authResponse;\n          FB.api(`/me?fields=${options.fields}`, fbUser => {\n            let user = new SocialUser();\n            user.id = fbUser.id;\n            user.name = fbUser.name;\n            user.email = fbUser.email;\n            user.photoUrl = 'https://graph.facebook.com/' + fbUser.id + '/picture?type=normal';\n            user.firstName = fbUser.first_name;\n            user.lastName = fbUser.last_name;\n            user.authToken = authResponse.accessToken;\n            user.response = fbUser;\n            resolve(user);\n          });\n        } else {\n          reject('User cancelled login or did not fully authorize.');\n        }\n      }, options);\n    });\n  }\n\n  signOut() {\n    return new Promise((resolve, reject) => {\n      FB.logout(response => {\n        resolve();\n      });\n    });\n  }\n\n}\n\nFacebookLoginProvider.PROVIDER_ID = 'FACEBOOK';\n\nclass AmazonLoginProvider extends BaseLoginProvider {\n  constructor(clientId, initOptions = {\n    scope: 'profile',\n    scope_data: {\n      profile: {\n        essential: false\n      }\n    },\n    redirect_uri: location.origin\n  }) {\n    super();\n    this.clientId = clientId;\n    this.initOptions = initOptions;\n  }\n\n  initialize() {\n    let amazonRoot = null;\n\n    if (document) {\n      amazonRoot = document.createElement('div');\n      amazonRoot.id = 'amazon-root';\n      document.body.appendChild(amazonRoot);\n    }\n\n    window.onAmazonLoginReady = () => {\n      amazon.Login.setClientId(this.clientId);\n    };\n\n    return new Promise((resolve, reject) => {\n      try {\n        this.loadScript('amazon-login-sdk', 'https://assets.loginwithamazon.com/sdk/na/login1.js', () => {\n          resolve();\n        }, amazonRoot);\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  getLoginStatus() {\n    return new Promise((resolve, reject) => {\n      let token = this.retrieveToken();\n\n      if (token) {\n        amazon.Login.retrieveProfile(token, response => {\n          if (response.success) {\n            let user = new SocialUser();\n            user.id = response.profile.CustomerId;\n            user.name = response.profile.Name;\n            user.email = response.profile.PrimaryEmail;\n            user.response = response.profile;\n            resolve(user);\n          } else {\n            reject(response.error);\n          }\n        });\n      } else {\n        reject(`No user is currently logged in with ${AmazonLoginProvider.PROVIDER_ID}`);\n      }\n    });\n  }\n\n  signIn(signInOptions) {\n    const options = Object.assign(Object.assign({}, this.initOptions), signInOptions);\n    return new Promise((resolve, reject) => {\n      amazon.Login.authorize(options, authResponse => {\n        if (authResponse.error) {\n          reject(authResponse.error);\n        } else {\n          amazon.Login.retrieveProfile(authResponse.access_token, response => {\n            let user = new SocialUser();\n            user.id = response.profile.CustomerId;\n            user.name = response.profile.Name;\n            user.email = response.profile.PrimaryEmail;\n            user.authToken = authResponse.access_token;\n            user.response = response.profile;\n            this.persistToken(authResponse.access_token);\n            resolve(user);\n          });\n        }\n      });\n    });\n  }\n\n  signOut() {\n    return new Promise((resolve, reject) => {\n      try {\n        amazon.Login.logout();\n        this.clearToken();\n        resolve();\n      } catch (err) {\n        reject(err.message);\n      }\n    });\n  }\n\n  persistToken(token) {\n    localStorage.setItem(`${AmazonLoginProvider.PROVIDER_ID}_token`, token);\n  }\n\n  retrieveToken() {\n    return localStorage.getItem(`${AmazonLoginProvider.PROVIDER_ID}_token`);\n  }\n\n  clearToken() {\n    localStorage.removeItem(`${AmazonLoginProvider.PROVIDER_ID}_token`);\n  }\n\n}\n\nAmazonLoginProvider.PROVIDER_ID = 'AMAZON';\n\nclass VKLoginProvider extends BaseLoginProvider {\n  constructor(clientId, initOptions = {\n    fields: 'photo_max,contacts',\n    version: '5.124'\n  }) {\n    super();\n    this.clientId = clientId;\n    this.initOptions = initOptions;\n    this.VK_API_URL = '//vk.com/js/api/openapi.js';\n    this.VK_API_GET_USER = 'users.get';\n  }\n\n  initialize() {\n    return new Promise((resolve, reject) => {\n      try {\n        this.loadScript(VKLoginProvider.PROVIDER_ID, this.VK_API_URL, () => {\n          VK.init({\n            apiId: this.clientId\n          });\n          resolve();\n        });\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  getLoginStatus() {\n    return new Promise((resolve, reject) => this.getLoginStatusInternal(resolve, reject));\n  }\n\n  signIn() {\n    return new Promise((resolve, reject) => this.signInInternal(resolve, reject));\n  }\n\n  signOut() {\n    return new Promise((resolve, reject) => {\n      VK.Auth.logout(response => {\n        resolve();\n      });\n    });\n  }\n\n  signInInternal(resolve, reject) {\n    VK.Auth.login(loginResponse => {\n      if (loginResponse.status === 'connected') {\n        this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);\n      }\n    });\n  }\n\n  getUser(userId, token, resolve) {\n    VK.Api.call(this.VK_API_GET_USER, {\n      user_id: userId,\n      fields: this.initOptions.fields,\n      v: this.initOptions.version\n    }, userResponse => {\n      resolve(this.createUser(Object.assign({}, {\n        token\n      }, userResponse.response[0])));\n    });\n  }\n\n  getLoginStatusInternal(resolve, reject) {\n    VK.Auth.getLoginStatus(loginResponse => {\n      if (loginResponse.status === 'connected') {\n        this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);\n      }\n    });\n  }\n\n  createUser(response) {\n    const user = new SocialUser();\n    user.id = response.id;\n    user.name = `${response.first_name} ${response.last_name}`;\n    user.photoUrl = response.photo_max;\n    user.authToken = response.token;\n    return user;\n  }\n\n}\n\nVKLoginProvider.PROVIDER_ID = 'VK';\n/**\r\n * Protocol modes supported by MSAL.\r\n */\n\nvar ProtocolMode;\n\n(function (ProtocolMode) {\n  ProtocolMode[\"AAD\"] = \"AAD\";\n  ProtocolMode[\"OIDC\"] = \"OIDC\";\n})(ProtocolMode || (ProtocolMode = {}));\n\nconst COMMON_AUTHORITY = 'https://login.microsoftonline.com/common/';\n/**\r\n * Microsoft Authentication using MSAL v2: https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-browser\r\n */\n\nclass MicrosoftLoginProvider extends BaseLoginProvider {\n  constructor(clientId, initOptions) {\n    super();\n    this.clientId = clientId;\n    this.initOptions = {\n      authority: COMMON_AUTHORITY,\n      scopes: ['openid', 'email', 'profile', 'User.Read'],\n      knownAuthorities: [],\n      protocolMode: ProtocolMode.AAD,\n      clientCapabilities: [],\n      cacheLocation: 'sessionStorage'\n    };\n    this.initOptions = Object.assign(Object.assign({}, this.initOptions), initOptions);\n  }\n\n  initialize() {\n    return new Promise((resolve, reject) => {\n      this.loadScript(MicrosoftLoginProvider.PROVIDER_ID, 'https://alcdn.msauth.net/browser/2.13.1/js/msal-browser.min.js', () => {\n        var _a;\n\n        try {\n          const config = {\n            auth: {\n              clientId: this.clientId,\n              redirectUri: (_a = this.initOptions.redirect_uri) !== null && _a !== void 0 ? _a : location.origin,\n              authority: this.initOptions.authority,\n              knownAuthorities: this.initOptions.knownAuthorities,\n              protocolMode: this.initOptions.protocolMode,\n              clientCapabilities: this.initOptions.clientCapabilities\n            },\n            cache: !this.initOptions.cacheLocation ? null : {\n              cacheLocation: this.initOptions.cacheLocation\n            }\n          };\n          this._instance = new msal.PublicClientApplication(config);\n          resolve();\n        } catch (e) {\n          reject(e);\n        }\n      });\n    });\n  }\n\n  getSocialUser(loginResponse) {\n    return new Promise((resolve, reject) => {\n      //After login, use Microsoft Graph API to get user info\n      let meRequest = new XMLHttpRequest();\n\n      meRequest.onreadystatechange = () => {\n        if (meRequest.readyState == 4) {\n          try {\n            if (meRequest.status == 200) {\n              let userInfo = JSON.parse(meRequest.responseText);\n              let user = new SocialUser();\n              user.provider = MicrosoftLoginProvider.PROVIDER_ID;\n              user.id = loginResponse.idToken;\n              user.authToken = loginResponse.accessToken;\n              user.name = loginResponse.idTokenClaims.name;\n              user.email = loginResponse.account.username;\n              user.idToken = loginResponse.idToken;\n              user.response = loginResponse;\n              user.firstName = userInfo.givenName;\n              user.lastName = userInfo.surname;\n              resolve(user);\n            } else {\n              reject(`Error retrieving user info: ${meRequest.status}`);\n            }\n          } catch (err) {\n            reject(err);\n          }\n        }\n      }; //Microsoft Graph ME Endpoint: https://docs.microsoft.com/en-us/graph/api/user-get?view=graph-rest-1.0&tabs=http\n\n\n      meRequest.open('GET', 'https://graph.microsoft.com/v1.0/me');\n      meRequest.setRequestHeader('Authorization', `Bearer ${loginResponse.accessToken}`);\n\n      try {\n        meRequest.send();\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  getLoginStatus() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const accounts = this._instance.getAllAccounts();\n\n      if ((accounts === null || accounts === void 0 ? void 0 : accounts.length) > 0) {\n        const loginResponse = yield this._instance.ssoSilent({\n          scopes: this.initOptions.scopes,\n          loginHint: accounts[0].username\n        });\n        return yield this.getSocialUser(loginResponse);\n      } else {\n        throw `No user is currently logged in with ${MicrosoftLoginProvider.PROVIDER_ID}`;\n      }\n    });\n  }\n\n  signIn() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const loginResponse = yield this._instance.loginPopup({\n        scopes: this.initOptions.scopes,\n        prompt: this.initOptions.prompt\n      });\n      return yield this.getSocialUser(loginResponse);\n    });\n  }\n\n  signOut(revoke) {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      const accounts = this._instance.getAllAccounts();\n\n      if ((accounts === null || accounts === void 0 ? void 0 : accounts.length) > 0) {\n        yield this._instance.logoutPopup({\n          account: accounts[0],\n          postLogoutRedirectUri: (_b = (_a = this.initOptions.logout_redirect_uri) !== null && _a !== void 0 ? _a : this.initOptions.redirect_uri) !== null && _b !== void 0 ? _b : location.href\n        });\n      }\n    });\n  }\n\n}\n\nMicrosoftLoginProvider.PROVIDER_ID = 'MICROSOFT';\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { AmazonLoginProvider, BaseLoginProvider, DummyLoginProvider, FacebookLoginProvider, GoogleLoginProvider, GoogleSigninButtonDirective, MicrosoftLoginProvider, SocialAuthService, SocialLoginModule, SocialUser, VKLoginProvider };","map":{"version":3,"sources":["C:/Users/KIIT/Desktop/KRISHISEWA/KrishiSewa/frontend/node_modules/@abacritt/angularx-social-login/fesm2015/abacritt-angularx-social-login.js"],"names":["__awaiter","i0","EventEmitter","Injectable","Inject","Directive","Input","NgModule","Optional","SkipSelf","BehaviorSubject","ReplaySubject","AsyncSubject","isObservable","skip","filter","take","CommonModule","BaseLoginProvider","constructor","loadScript","id","src","onload","parentElement","document","getElementById","signInJS","createElement","async","head","appendChild","SocialUser","defaultInitOptions","oneTapEnabled","GoogleLoginProvider","clientId","initOptions","changeUser","_socialUser","_accessToken","_receivedAccessToken","Object","assign","pipe","subscribe","initialize","autoLogin","Promise","resolve","reject","PROVIDER_ID","_a","google","accounts","client_id","auto_select","callback","credential","socialUser","createSocialUser","next","prompt_parent_id","itp_support","user","prompt","console","debug","scopes","scope","Array","s","join","_tokenClient","oauth2","initTokenClient","tokenResponse","error","code","description","error_description","uri","error_uri","access_token","err","getLoginStatus","value","refreshToken","revoke","response","getAccessToken","requestAccessToken","hint","email","revokeAccessToken","signIn","signOut","disableAutoSelect","idToken","payload","decodeJwt","sub","name","photoUrl","picture","firstName","lastName","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","window","atob","map","c","charCodeAt","toString","slice","JSON","parse","SocialAuthService","config","_ngZone","_injector","providers","Map","_user","_authState","initialized","_initState","then","authState","asObservable","initState","undefined","onError","forEach","item","set","provider","get","all","from","values","loginStatusPromises","loggedIn","key","promise","push","setUser","catch","run","finally","complete","providerId","providerObject","ERR_NOT_INITIALIZED","ERR_LOGIN_PROVIDER_NOT_FOUND","ERR_NOT_SUPPORTED_FOR_ACCESS_TOKEN","refreshAuthToken","ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN","refreshAccessToken","signInOptions","ERR_NOT_LOGGED_IN","ɵfac","NgZone","Injector","ɵprov","type","args","providedIn","decorators","GoogleSigninButtonDirective","el","socialAuthService","size","text","shape","theme","logo_alignment","width","locale","renderButton","nativeElement","ElementRef","ɵdir","selector","SocialLoginModule","parentModule","Error","ngModule","provide","useValue","ɵmod","ɵinj","declarations","imports","exports","DummyLoginProvider","dummy","DEFAULT_USER","authToken","authorizationCode","FacebookLoginProvider","requestOptions","fields","version","FB","init","appId","autoLogAppEvents","cookie","xfbml","status","authResponse","api","fbUser","accessToken","first_name","last_name","options","login","logout","AmazonLoginProvider","scope_data","profile","essential","redirect_uri","location","origin","amazonRoot","body","onAmazonLoginReady","amazon","Login","setClientId","token","retrieveToken","retrieveProfile","success","CustomerId","Name","PrimaryEmail","authorize","persistToken","clearToken","message","localStorage","setItem","getItem","removeItem","VKLoginProvider","VK_API_URL","VK_API_GET_USER","VK","apiId","getLoginStatusInternal","signInInternal","Auth","loginResponse","getUser","session","mid","sid","userId","Api","call","user_id","v","userResponse","createUser","photo_max","ProtocolMode","COMMON_AUTHORITY","MicrosoftLoginProvider","authority","knownAuthorities","protocolMode","AAD","clientCapabilities","cacheLocation","auth","redirectUri","cache","_instance","msal","PublicClientApplication","e","getSocialUser","meRequest","XMLHttpRequest","onreadystatechange","readyState","userInfo","responseText","idTokenClaims","account","username","givenName","surname","open","setRequestHeader","send","getAllAccounts","length","ssoSilent","loginHint","loginPopup","_b","logoutPopup","postLogoutRedirectUri","logout_redirect_uri","href"],"mappings":"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","sourcesContent":["import { __awaiter } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Injectable, Inject, Directive, Input, NgModule, Optional, SkipSelf } from '@angular/core';\nimport { BehaviorSubject, ReplaySubject, AsyncSubject, isObservable } from 'rxjs';\nimport { skip, filter, take } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\n\nclass BaseLoginProvider {\r\n    constructor() { }\r\n    loadScript(id, src, onload, parentElement = null) {\r\n        // get document if platform is only browser\r\n        if (typeof document !== 'undefined' && !document.getElementById(id)) {\r\n            let signInJS = document.createElement('script');\r\n            signInJS.async = true;\r\n            signInJS.src = src;\r\n            signInJS.onload = onload;\r\n            if (!parentElement) {\r\n                parentElement = document.head;\r\n            }\r\n            parentElement.appendChild(signInJS);\r\n        }\r\n    }\r\n}\n\nclass SocialUser {\r\n}\n\nconst defaultInitOptions = {\r\n    oneTapEnabled: true,\r\n};\r\nclass GoogleLoginProvider extends BaseLoginProvider {\r\n    constructor(clientId, initOptions) {\r\n        super();\r\n        this.clientId = clientId;\r\n        this.initOptions = initOptions;\r\n        this.changeUser = new EventEmitter();\r\n        this._socialUser = new BehaviorSubject(null);\r\n        this._accessToken = new BehaviorSubject(null);\r\n        this._receivedAccessToken = new EventEmitter();\r\n        this.initOptions = Object.assign(Object.assign({}, defaultInitOptions), this.initOptions);\r\n        // emit changeUser events but skip initial value from behaviorSubject\r\n        this._socialUser.pipe(skip(1)).subscribe(this.changeUser);\r\n        // emit receivedAccessToken but skip initial value from behaviorSubject\r\n        this._accessToken.pipe(skip(1)).subscribe(this._receivedAccessToken);\r\n    }\r\n    initialize(autoLogin) {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                this.loadScript(GoogleLoginProvider.PROVIDER_ID, 'https://accounts.google.com/gsi/client', () => {\r\n                    var _a;\r\n                    google.accounts.id.initialize({\r\n                        client_id: this.clientId,\r\n                        auto_select: autoLogin,\r\n                        callback: ({ credential }) => {\r\n                            const socialUser = this.createSocialUser(credential);\r\n                            this._socialUser.next(socialUser);\r\n                        },\r\n                        prompt_parent_id: (_a = this.initOptions) === null || _a === void 0 ? void 0 : _a.prompt_parent_id,\r\n                        itp_support: this.initOptions.oneTapEnabled\r\n                    });\r\n                    if (this.initOptions.oneTapEnabled) {\r\n                        this._socialUser\r\n                            .pipe(filter((user) => user === null))\r\n                            .subscribe(() => google.accounts.id.prompt(console.debug));\r\n                    }\r\n                    if (this.initOptions.scopes) {\r\n                        const scope = this.initOptions.scopes instanceof Array\r\n                            ? this.initOptions.scopes.filter((s) => s).join(' ')\r\n                            : this.initOptions.scopes;\r\n                        this._tokenClient = google.accounts.oauth2.initTokenClient({\r\n                            client_id: this.clientId,\r\n                            scope,\r\n                            prompt: this.initOptions.prompt,\r\n                            callback: (tokenResponse) => {\r\n                                if (tokenResponse.error) {\r\n                                    this._accessToken.error({\r\n                                        code: tokenResponse.error,\r\n                                        description: tokenResponse.error_description,\r\n                                        uri: tokenResponse.error_uri,\r\n                                    });\r\n                                }\r\n                                else {\r\n                                    this._accessToken.next(tokenResponse.access_token);\r\n                                }\r\n                            },\r\n                        });\r\n                    }\r\n                    resolve();\r\n                });\r\n            }\r\n            catch (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    }\r\n    getLoginStatus() {\r\n        return new Promise((resolve, reject) => {\r\n            if (this._socialUser.value) {\r\n                resolve(this._socialUser.value);\r\n            }\r\n            else {\r\n                reject(`No user is currently logged in with ${GoogleLoginProvider.PROVIDER_ID}`);\r\n            }\r\n        });\r\n    }\r\n    refreshToken() {\r\n        return new Promise((resolve, reject) => {\r\n            google.accounts.id.revoke(this._socialUser.value.id, (response) => {\r\n                if (response.error)\r\n                    reject(response.error);\r\n                else\r\n                    resolve(this._socialUser.value);\r\n            });\r\n        });\r\n    }\r\n    getAccessToken() {\r\n        return new Promise((resolve, reject) => {\r\n            var _a;\r\n            if (!this._tokenClient) {\r\n                if (this._socialUser.value) {\r\n                    reject('No token client was instantiated, you should specify some scopes.');\r\n                }\r\n                else {\r\n                    reject('You should be logged-in first.');\r\n                }\r\n            }\r\n            else {\r\n                this._tokenClient.requestAccessToken({\r\n                    hint: (_a = this._socialUser.value) === null || _a === void 0 ? void 0 : _a.email,\r\n                });\r\n                this._receivedAccessToken.pipe(take(1)).subscribe(resolve);\r\n            }\r\n        });\r\n    }\r\n    revokeAccessToken() {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this._tokenClient) {\r\n                reject('No token client was instantiated, you should specify some scopes.');\r\n            }\r\n            else if (!this._accessToken.value) {\r\n                reject('No access token to revoke');\r\n            }\r\n            else {\r\n                google.accounts.oauth2.revoke(this._accessToken.value, () => {\r\n                    this._accessToken.next(null);\r\n                    resolve();\r\n                });\r\n            }\r\n        });\r\n    }\r\n    signIn() {\r\n        return Promise.reject('You should not call this method directly for Google, use \"<asl-google-signin-button>\" wrapper ' +\r\n            'or generate the button yourself with \"google.accounts.id.renderButton()\" ' +\r\n            '(https://developers.google.com/identity/gsi/web/guides/display-button#javascript)');\r\n    }\r\n    signOut() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            google.accounts.id.disableAutoSelect();\r\n            this._socialUser.next(null);\r\n        });\r\n    }\r\n    createSocialUser(idToken) {\r\n        const user = new SocialUser();\r\n        user.idToken = idToken;\r\n        const payload = this.decodeJwt(idToken);\r\n        user.id = payload.sub;\r\n        user.name = payload.name;\r\n        user.email = payload.email;\r\n        user.photoUrl = payload.picture;\r\n        user.firstName = payload['given_name'];\r\n        user.lastName = payload['family_name'];\r\n        return user;\r\n    }\r\n    decodeJwt(idToken) {\r\n        const base64Url = idToken.split(\".\")[1];\r\n        const base64 = base64Url.replace(/-/g, \"+\").replace(/_/g, \"/\");\r\n        const jsonPayload = decodeURIComponent(window.atob(base64)\r\n            .split(\"\")\r\n            .map(function (c) {\r\n            return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\r\n        })\r\n            .join(\"\"));\r\n        return JSON.parse(jsonPayload);\r\n    }\r\n}\r\nGoogleLoginProvider.PROVIDER_ID = 'GOOGLE';\n\n/**\r\n * The service encapsulating the social login functionality. Exposes methods like\r\n * `signIn`, `signOut`. Also, exposes an `authState` `Observable` that one can\r\n * subscribe to get the current logged in user information.\r\n *\r\n * @dynamic\r\n */\r\nclass SocialAuthService {\r\n    /**\r\n     * @param config A `SocialAuthServiceConfig` object or a `Promise` that resolves to a `SocialAuthServiceConfig` object\r\n     */\r\n    constructor(config, _ngZone, _injector) {\r\n        this._ngZone = _ngZone;\r\n        this._injector = _injector;\r\n        this.providers = new Map();\r\n        this.autoLogin = false;\r\n        this._user = null;\r\n        this._authState = new ReplaySubject(1);\r\n        /* Consider making this an enum comprising LOADING, LOADED, FAILED etc. */\r\n        this.initialized = false;\r\n        this._initState = new AsyncSubject();\r\n        if (config instanceof Promise) {\r\n            config.then((config) => {\r\n                this.initialize(config);\r\n            });\r\n        }\r\n        else {\r\n            this.initialize(config);\r\n        }\r\n    }\r\n    /** An `Observable` that one can subscribe to get the current logged in user information */\r\n    get authState() {\r\n        return this._authState.asObservable();\r\n    }\r\n    /** An `Observable` to communicate the readiness of the service and associated login providers */\r\n    get initState() {\r\n        return this._initState.asObservable();\r\n    }\r\n    initialize(config) {\r\n        this.autoLogin = config.autoLogin !== undefined ? config.autoLogin : false;\r\n        const { onError = console.error } = config;\r\n        config.providers.forEach((item) => {\r\n            this.providers.set(item.id, 'prototype' in item.provider\r\n                ? this._injector.get(item.provider)\r\n                : item.provider);\r\n        });\r\n        Promise.all(Array.from(this.providers.values()).map((provider) => provider.initialize(this.autoLogin)))\r\n            .then(() => {\r\n            if (this.autoLogin) {\r\n                const loginStatusPromises = [];\r\n                let loggedIn = false;\r\n                this.providers.forEach((provider, key) => {\r\n                    const promise = provider.getLoginStatus();\r\n                    loginStatusPromises.push(promise);\r\n                    promise\r\n                        .then((user) => {\r\n                        this.setUser(user, key);\r\n                        loggedIn = true;\r\n                    })\r\n                        .catch(console.debug);\r\n                });\r\n                Promise.all(loginStatusPromises).catch(() => {\r\n                    if (!loggedIn) {\r\n                        this._user = null;\r\n                        this._authState.next(null);\r\n                    }\r\n                });\r\n            }\r\n            this.providers.forEach((provider, key) => {\r\n                if (isObservable(provider.changeUser)) {\r\n                    provider.changeUser.subscribe((user) => {\r\n                        this._ngZone.run(() => {\r\n                            this.setUser(user, key);\r\n                        });\r\n                    });\r\n                }\r\n            });\r\n        })\r\n            .catch((error) => {\r\n            onError(error);\r\n        })\r\n            .finally(() => {\r\n            this.initialized = true;\r\n            this._initState.next(this.initialized);\r\n            this._initState.complete();\r\n        });\r\n    }\r\n    getAccessToken(providerId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const providerObject = this.providers.get(providerId);\r\n            if (!this.initialized) {\r\n                throw SocialAuthService.ERR_NOT_INITIALIZED;\r\n            }\r\n            else if (!providerObject) {\r\n                throw SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND;\r\n            }\r\n            else if (!(providerObject instanceof GoogleLoginProvider)) {\r\n                throw SocialAuthService.ERR_NOT_SUPPORTED_FOR_ACCESS_TOKEN;\r\n            }\r\n            return yield providerObject.getAccessToken();\r\n        });\r\n    }\r\n    refreshAuthToken(providerId) {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.initialized) {\r\n                reject(SocialAuthService.ERR_NOT_INITIALIZED);\r\n            }\r\n            else {\r\n                const providerObject = this.providers.get(providerId);\r\n                if (providerObject) {\r\n                    if (typeof providerObject.refreshToken !== 'function') {\r\n                        reject(SocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN);\r\n                    }\r\n                    else {\r\n                        providerObject\r\n                            .refreshToken()\r\n                            .then((user) => {\r\n                            this.setUser(user, providerId);\r\n                            resolve();\r\n                        })\r\n                            .catch((err) => {\r\n                            reject(err);\r\n                        });\r\n                    }\r\n                }\r\n                else {\r\n                    reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    refreshAccessToken(providerId) {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.initialized) {\r\n                reject(SocialAuthService.ERR_NOT_INITIALIZED);\r\n            }\r\n            else if (providerId !== GoogleLoginProvider.PROVIDER_ID) {\r\n                reject(SocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN);\r\n            }\r\n            else {\r\n                const providerObject = this.providers.get(providerId);\r\n                if (providerObject instanceof GoogleLoginProvider) {\r\n                    providerObject.revokeAccessToken().then(resolve).catch(reject);\r\n                }\r\n                else {\r\n                    reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * A method used to sign in a user with a specific `LoginProvider`.\r\n     *\r\n     * @param providerId Id with which the `LoginProvider` has been registered with the service\r\n     * @param signInOptions Optional `LoginProvider` specific arguments\r\n     * @returns A `Promise` that resolves to the authenticated user information\r\n     */\r\n    signIn(providerId, signInOptions) {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.initialized) {\r\n                reject(SocialAuthService.ERR_NOT_INITIALIZED);\r\n            }\r\n            else {\r\n                let providerObject = this.providers.get(providerId);\r\n                if (providerObject) {\r\n                    providerObject\r\n                        .signIn(signInOptions)\r\n                        .then((user) => {\r\n                        this.setUser(user, providerId);\r\n                        resolve(user);\r\n                    })\r\n                        .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n                }\r\n                else {\r\n                    reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * A method used to sign out the currently loggen in user.\r\n     *\r\n     * @param revoke Optional parameter to specify whether a hard sign out is to be performed\r\n     * @returns A `Promise` that resolves if the operation is successful, rejects otherwise\r\n     */\r\n    signOut(revoke = false) {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.initialized) {\r\n                reject(SocialAuthService.ERR_NOT_INITIALIZED);\r\n            }\r\n            else if (!this._user) {\r\n                reject(SocialAuthService.ERR_NOT_LOGGED_IN);\r\n            }\r\n            else {\r\n                let providerId = this._user.provider;\r\n                let providerObject = this.providers.get(providerId);\r\n                if (providerObject) {\r\n                    providerObject\r\n                        .signOut(revoke)\r\n                        .then(() => {\r\n                        resolve();\r\n                        this.setUser(null);\r\n                    })\r\n                        .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n                }\r\n                else {\r\n                    reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    setUser(user, id) {\r\n        if (user && id)\r\n            user.provider = id;\r\n        this._user = user;\r\n        this._authState.next(user);\r\n    }\r\n}\r\nSocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND = 'Login provider not found';\r\nSocialAuthService.ERR_NOT_LOGGED_IN = 'Not logged in';\r\nSocialAuthService.ERR_NOT_INITIALIZED = 'Login providers not ready yet. Are there errors on your console?';\r\nSocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN = 'Chosen login provider is not supported for refreshing a token';\r\nSocialAuthService.ERR_NOT_SUPPORTED_FOR_ACCESS_TOKEN = 'Chosen login provider is not supported for getting an access token';\r\nSocialAuthService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: SocialAuthService, deps: [{ token: 'SocialAuthServiceConfig' }, { token: i0.NgZone }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });\r\nSocialAuthService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: SocialAuthService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: SocialAuthService, decorators: [{\r\n            type: Injectable,\r\n            args: [{ providedIn: 'root' }]\r\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: ['SocialAuthServiceConfig']\r\n                }] }, { type: i0.NgZone }, { type: i0.Injector }]; } });\n\nclass GoogleSigninButtonDirective {\r\n    constructor(el, socialAuthService) {\r\n        this.type = 'icon';\r\n        this.size = 'medium';\r\n        this.text = 'signin_with';\r\n        this.shape = 'rectangular';\r\n        this.theme = 'outline';\r\n        this.logo_alignment = 'left';\r\n        this.width = '';\r\n        this.locale = '';\r\n        socialAuthService.initState.pipe(take(1)).subscribe(() => {\r\n            Promise.resolve(this.width).then((value) => {\r\n                if (value > '400' || (value < '200' && value != '')) {\r\n                    Promise.reject('Please note .. max-width 400 , min-width 200 ' +\r\n                        '(https://developers.google.com/identity/gsi/web/tools/configurator)');\r\n                }\r\n                else {\r\n                    google.accounts.id.renderButton(el.nativeElement, {\r\n                        type: this.type,\r\n                        size: this.size,\r\n                        text: this.text,\r\n                        width: this.width,\r\n                        shape: this.shape,\r\n                        theme: this.theme,\r\n                        logo_alignment: this.logo_alignment,\r\n                        locale: this.locale,\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\nGoogleSigninButtonDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: GoogleSigninButtonDirective, deps: [{ token: i0.ElementRef }, { token: SocialAuthService }], target: i0.ɵɵFactoryTarget.Directive });\r\nGoogleSigninButtonDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.2.17\", type: GoogleSigninButtonDirective, selector: \"asl-google-signin-button\", inputs: { type: \"type\", size: \"size\", text: \"text\", shape: \"shape\", theme: \"theme\", logo_alignment: \"logo_alignment\", width: \"width\", locale: \"locale\" }, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: GoogleSigninButtonDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    // eslint-disable-next-line @angular-eslint/directive-selector\r\n                    selector: 'asl-google-signin-button',\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: SocialAuthService }]; }, propDecorators: { type: [{\r\n                type: Input\r\n            }], size: [{\r\n                type: Input\r\n            }], text: [{\r\n                type: Input\r\n            }], shape: [{\r\n                type: Input\r\n            }], theme: [{\r\n                type: Input\r\n            }], logo_alignment: [{\r\n                type: Input\r\n            }], width: [{\r\n                type: Input\r\n            }], locale: [{\r\n                type: Input\r\n            }] } });\n\n/**\r\n * The main module of angularx-social-login library.\r\n */\r\nclass SocialLoginModule {\r\n    constructor(parentModule) {\r\n        if (parentModule) {\r\n            throw new Error('SocialLoginModule is already loaded. Import it in the AppModule only');\r\n        }\r\n    }\r\n    static initialize(config) {\r\n        return {\r\n            ngModule: SocialLoginModule,\r\n            providers: [\r\n                SocialAuthService,\r\n                {\r\n                    provide: 'SocialAuthServiceConfig',\r\n                    useValue: config\r\n                }\r\n            ]\r\n        };\r\n    }\r\n}\r\nSocialLoginModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: SocialLoginModule, deps: [{ token: SocialLoginModule, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.NgModule });\r\nSocialLoginModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: SocialLoginModule, declarations: [GoogleSigninButtonDirective], imports: [CommonModule], exports: [GoogleSigninButtonDirective] });\r\nSocialLoginModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: SocialLoginModule, providers: [\r\n        SocialAuthService\r\n    ], imports: [[\r\n            CommonModule\r\n        ]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: SocialLoginModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [GoogleSigninButtonDirective],\r\n                    imports: [\r\n                        CommonModule\r\n                    ],\r\n                    providers: [\r\n                        SocialAuthService\r\n                    ],\r\n                    exports: [GoogleSigninButtonDirective]\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: SocialLoginModule, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: SkipSelf\r\n                }] }]; } });\n\n// Simulates login / logout without actually requiring an Internet connection.\r\n//\r\n// Useful for certain development situations.\r\n//\r\n// For example, if you want to simulate the greatest football referee England has ever produced:\r\n//\r\n//  const dummyUser: SocialUser = {\r\n//     id: '0123456789',\r\n//     name: 'Howard Webb',\r\n//     email: 'howard@webb.com',\r\n//     firstName: 'Howard',\r\n//     lastName: 'Webb',\r\n//     authToken: 'dummyAuthToken',\r\n//     photoUrl: 'https://en.wikipedia.org/wiki/Howard_Webb#/media/File:Howard_Webb_march11.jpg',\r\n//     provider: 'DUMMY',\r\n//     idToken: 'dummyIdToken',\r\n//     authorizationCode: 'dummyAuthCode'\r\n// };\r\n//\r\n//  let config = new AuthServiceConfig([\r\n//  { ... },\r\n//  {\r\n//       id: DummyLoginProvider.PROVIDER_ID,\r\n//       provider: new DummyLoginProvider(dummyUser)  // Pass your user into the constructor\r\n//   },\r\n//  { ... }\r\n//  ]);\r\nclass DummyLoginProvider extends BaseLoginProvider {\r\n    constructor(dummy) {\r\n        super();\r\n        if (dummy) {\r\n            this.dummy = dummy;\r\n        }\r\n        else {\r\n            this.dummy = DummyLoginProvider.DEFAULT_USER;\r\n        }\r\n        // Start not logged in\r\n        this.loggedIn = false;\r\n    }\r\n    getLoginStatus() {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.loggedIn) {\r\n                resolve(this.dummy);\r\n            }\r\n            else {\r\n                reject('No user is currently logged in.');\r\n            }\r\n        });\r\n    }\r\n    initialize() {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    }\r\n    signIn() {\r\n        return new Promise((resolve, reject) => {\r\n            this.loggedIn = true;\r\n            resolve(this.dummy);\r\n        });\r\n    }\r\n    signOut(revoke) {\r\n        return new Promise((resolve, reject) => {\r\n            this.loggedIn = false;\r\n            resolve();\r\n        });\r\n    }\r\n}\r\nDummyLoginProvider.PROVIDER_ID = 'DUMMY';\r\nDummyLoginProvider.DEFAULT_USER = {\r\n    id: '1234567890',\r\n    name: 'Mickey Mouse',\r\n    email: 'mickey@mouse.com',\r\n    firstName: 'Mickey',\r\n    lastName: 'Mouse',\r\n    authToken: 'dummyAuthToken',\r\n    photoUrl: 'https://en.wikipedia.org/wiki/File:Mickey_Mouse.png',\r\n    provider: 'DUMMY',\r\n    idToken: 'dummyIdToken',\r\n    authorizationCode: 'dummyAuthCode',\r\n    response: {},\r\n};\n\nclass FacebookLoginProvider extends BaseLoginProvider {\r\n    constructor(clientId, initOptions = {}) {\r\n        super();\r\n        this.clientId = clientId;\r\n        this.requestOptions = {\r\n            scope: 'email,public_profile',\r\n            locale: 'en_US',\r\n            fields: 'name,email,picture,first_name,last_name',\r\n            version: 'v10.0',\r\n        };\r\n        this.requestOptions = Object.assign(Object.assign({}, this.requestOptions), initOptions);\r\n    }\r\n    initialize() {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                this.loadScript(FacebookLoginProvider.PROVIDER_ID, `//connect.facebook.net/${this.requestOptions.locale}/sdk.js`, () => {\r\n                    FB.init({\r\n                        appId: this.clientId,\r\n                        autoLogAppEvents: true,\r\n                        cookie: true,\r\n                        xfbml: true,\r\n                        version: this.requestOptions.version,\r\n                    });\r\n                    resolve();\r\n                });\r\n            }\r\n            catch (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    }\r\n    getLoginStatus() {\r\n        return new Promise((resolve, reject) => {\r\n            FB.getLoginStatus((response) => {\r\n                if (response.status === 'connected') {\r\n                    let authResponse = response.authResponse;\r\n                    FB.api(`/me?fields=${this.requestOptions.fields}`, (fbUser) => {\r\n                        let user = new SocialUser();\r\n                        user.id = fbUser.id;\r\n                        user.name = fbUser.name;\r\n                        user.email = fbUser.email;\r\n                        user.photoUrl =\r\n                            'https://graph.facebook.com/' +\r\n                                fbUser.id +\r\n                                '/picture?type=normal&access_token=' +\r\n                                authResponse.accessToken;\r\n                        user.firstName = fbUser.first_name;\r\n                        user.lastName = fbUser.last_name;\r\n                        user.authToken = authResponse.accessToken;\r\n                        user.response = fbUser;\r\n                        resolve(user);\r\n                    });\r\n                }\r\n                else {\r\n                    reject(`No user is currently logged in with ${FacebookLoginProvider.PROVIDER_ID}`);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    signIn(signInOptions) {\r\n        const options = Object.assign(Object.assign({}, this.requestOptions), signInOptions);\r\n        return new Promise((resolve, reject) => {\r\n            FB.login((response) => {\r\n                if (response.authResponse) {\r\n                    let authResponse = response.authResponse;\r\n                    FB.api(`/me?fields=${options.fields}`, (fbUser) => {\r\n                        let user = new SocialUser();\r\n                        user.id = fbUser.id;\r\n                        user.name = fbUser.name;\r\n                        user.email = fbUser.email;\r\n                        user.photoUrl =\r\n                            'https://graph.facebook.com/' +\r\n                                fbUser.id +\r\n                                '/picture?type=normal';\r\n                        user.firstName = fbUser.first_name;\r\n                        user.lastName = fbUser.last_name;\r\n                        user.authToken = authResponse.accessToken;\r\n                        user.response = fbUser;\r\n                        resolve(user);\r\n                    });\r\n                }\r\n                else {\r\n                    reject('User cancelled login or did not fully authorize.');\r\n                }\r\n            }, options);\r\n        });\r\n    }\r\n    signOut() {\r\n        return new Promise((resolve, reject) => {\r\n            FB.logout((response) => {\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n}\r\nFacebookLoginProvider.PROVIDER_ID = 'FACEBOOK';\n\nclass AmazonLoginProvider extends BaseLoginProvider {\r\n    constructor(clientId, initOptions = {\r\n        scope: 'profile',\r\n        scope_data: {\r\n            profile: { essential: false },\r\n        },\r\n        redirect_uri: location.origin,\r\n    }) {\r\n        super();\r\n        this.clientId = clientId;\r\n        this.initOptions = initOptions;\r\n    }\r\n    initialize() {\r\n        let amazonRoot = null;\r\n        if (document) {\r\n            amazonRoot = document.createElement('div');\r\n            amazonRoot.id = 'amazon-root';\r\n            document.body.appendChild(amazonRoot);\r\n        }\r\n        window.onAmazonLoginReady = () => {\r\n            amazon.Login.setClientId(this.clientId);\r\n        };\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                this.loadScript('amazon-login-sdk', 'https://assets.loginwithamazon.com/sdk/na/login1.js', () => {\r\n                    resolve();\r\n                }, amazonRoot);\r\n            }\r\n            catch (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    }\r\n    getLoginStatus() {\r\n        return new Promise((resolve, reject) => {\r\n            let token = this.retrieveToken();\r\n            if (token) {\r\n                amazon.Login.retrieveProfile(token, (response) => {\r\n                    if (response.success) {\r\n                        let user = new SocialUser();\r\n                        user.id = response.profile.CustomerId;\r\n                        user.name = response.profile.Name;\r\n                        user.email = response.profile.PrimaryEmail;\r\n                        user.response = response.profile;\r\n                        resolve(user);\r\n                    }\r\n                    else {\r\n                        reject(response.error);\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                reject(`No user is currently logged in with ${AmazonLoginProvider.PROVIDER_ID}`);\r\n            }\r\n        });\r\n    }\r\n    signIn(signInOptions) {\r\n        const options = Object.assign(Object.assign({}, this.initOptions), signInOptions);\r\n        return new Promise((resolve, reject) => {\r\n            amazon.Login.authorize(options, (authResponse) => {\r\n                if (authResponse.error) {\r\n                    reject(authResponse.error);\r\n                }\r\n                else {\r\n                    amazon.Login.retrieveProfile(authResponse.access_token, (response) => {\r\n                        let user = new SocialUser();\r\n                        user.id = response.profile.CustomerId;\r\n                        user.name = response.profile.Name;\r\n                        user.email = response.profile.PrimaryEmail;\r\n                        user.authToken = authResponse.access_token;\r\n                        user.response = response.profile;\r\n                        this.persistToken(authResponse.access_token);\r\n                        resolve(user);\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n    signOut() {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                amazon.Login.logout();\r\n                this.clearToken();\r\n                resolve();\r\n            }\r\n            catch (err) {\r\n                reject(err.message);\r\n            }\r\n        });\r\n    }\r\n    persistToken(token) {\r\n        localStorage.setItem(`${AmazonLoginProvider.PROVIDER_ID}_token`, token);\r\n    }\r\n    retrieveToken() {\r\n        return localStorage.getItem(`${AmazonLoginProvider.PROVIDER_ID}_token`);\r\n    }\r\n    clearToken() {\r\n        localStorage.removeItem(`${AmazonLoginProvider.PROVIDER_ID}_token`);\r\n    }\r\n}\r\nAmazonLoginProvider.PROVIDER_ID = 'AMAZON';\n\nclass VKLoginProvider extends BaseLoginProvider {\r\n    constructor(clientId, initOptions = {\r\n        fields: 'photo_max,contacts',\r\n        version: '5.124',\r\n    }) {\r\n        super();\r\n        this.clientId = clientId;\r\n        this.initOptions = initOptions;\r\n        this.VK_API_URL = '//vk.com/js/api/openapi.js';\r\n        this.VK_API_GET_USER = 'users.get';\r\n    }\r\n    initialize() {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                this.loadScript(VKLoginProvider.PROVIDER_ID, this.VK_API_URL, () => {\r\n                    VK.init({\r\n                        apiId: this.clientId,\r\n                    });\r\n                    resolve();\r\n                });\r\n            }\r\n            catch (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    }\r\n    getLoginStatus() {\r\n        return new Promise((resolve, reject) => this.getLoginStatusInternal(resolve, reject));\r\n    }\r\n    signIn() {\r\n        return new Promise((resolve, reject) => this.signInInternal(resolve, reject));\r\n    }\r\n    signOut() {\r\n        return new Promise((resolve, reject) => {\r\n            VK.Auth.logout((response) => {\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n    signInInternal(resolve, reject) {\r\n        VK.Auth.login((loginResponse) => {\r\n            if (loginResponse.status === 'connected') {\r\n                this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);\r\n            }\r\n        });\r\n    }\r\n    getUser(userId, token, resolve) {\r\n        VK.Api.call(this.VK_API_GET_USER, {\r\n            user_id: userId,\r\n            fields: this.initOptions.fields,\r\n            v: this.initOptions.version,\r\n        }, (userResponse) => {\r\n            resolve(this.createUser(Object.assign({}, { token }, userResponse.response[0])));\r\n        });\r\n    }\r\n    getLoginStatusInternal(resolve, reject) {\r\n        VK.Auth.getLoginStatus((loginResponse) => {\r\n            if (loginResponse.status === 'connected') {\r\n                this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);\r\n            }\r\n        });\r\n    }\r\n    createUser(response) {\r\n        const user = new SocialUser();\r\n        user.id = response.id;\r\n        user.name = `${response.first_name} ${response.last_name}`;\r\n        user.photoUrl = response.photo_max;\r\n        user.authToken = response.token;\r\n        return user;\r\n    }\r\n}\r\nVKLoginProvider.PROVIDER_ID = 'VK';\n\n/**\r\n * Protocol modes supported by MSAL.\r\n */\r\nvar ProtocolMode;\r\n(function (ProtocolMode) {\r\n    ProtocolMode[\"AAD\"] = \"AAD\";\r\n    ProtocolMode[\"OIDC\"] = \"OIDC\";\r\n})(ProtocolMode || (ProtocolMode = {}));\r\nconst COMMON_AUTHORITY = 'https://login.microsoftonline.com/common/';\r\n/**\r\n * Microsoft Authentication using MSAL v2: https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-browser\r\n */\r\nclass MicrosoftLoginProvider extends BaseLoginProvider {\r\n    constructor(clientId, initOptions) {\r\n        super();\r\n        this.clientId = clientId;\r\n        this.initOptions = {\r\n            authority: COMMON_AUTHORITY,\r\n            scopes: ['openid', 'email', 'profile', 'User.Read'],\r\n            knownAuthorities: [],\r\n            protocolMode: ProtocolMode.AAD,\r\n            clientCapabilities: [],\r\n            cacheLocation: 'sessionStorage'\r\n        };\r\n        this.initOptions = Object.assign(Object.assign({}, this.initOptions), initOptions);\r\n    }\r\n    initialize() {\r\n        return new Promise((resolve, reject) => {\r\n            this.loadScript(MicrosoftLoginProvider.PROVIDER_ID, 'https://alcdn.msauth.net/browser/2.13.1/js/msal-browser.min.js', () => {\r\n                var _a;\r\n                try {\r\n                    const config = {\r\n                        auth: {\r\n                            clientId: this.clientId,\r\n                            redirectUri: (_a = this.initOptions.redirect_uri) !== null && _a !== void 0 ? _a : location.origin,\r\n                            authority: this.initOptions.authority,\r\n                            knownAuthorities: this.initOptions.knownAuthorities,\r\n                            protocolMode: this.initOptions.protocolMode,\r\n                            clientCapabilities: this.initOptions.clientCapabilities\r\n                        },\r\n                        cache: !this.initOptions.cacheLocation ? null : {\r\n                            cacheLocation: this.initOptions.cacheLocation\r\n                        }\r\n                    };\r\n                    this._instance = new msal.PublicClientApplication(config);\r\n                    resolve();\r\n                }\r\n                catch (e) {\r\n                    reject(e);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    getSocialUser(loginResponse) {\r\n        return new Promise((resolve, reject) => {\r\n            //After login, use Microsoft Graph API to get user info\r\n            let meRequest = new XMLHttpRequest();\r\n            meRequest.onreadystatechange = () => {\r\n                if (meRequest.readyState == 4) {\r\n                    try {\r\n                        if (meRequest.status == 200) {\r\n                            let userInfo = JSON.parse(meRequest.responseText);\r\n                            let user = new SocialUser();\r\n                            user.provider = MicrosoftLoginProvider.PROVIDER_ID;\r\n                            user.id = loginResponse.idToken;\r\n                            user.authToken = loginResponse.accessToken;\r\n                            user.name = loginResponse.idTokenClaims.name;\r\n                            user.email = loginResponse.account.username;\r\n                            user.idToken = loginResponse.idToken;\r\n                            user.response = loginResponse;\r\n                            user.firstName = userInfo.givenName;\r\n                            user.lastName = userInfo.surname;\r\n                            resolve(user);\r\n                        }\r\n                        else {\r\n                            reject(`Error retrieving user info: ${meRequest.status}`);\r\n                        }\r\n                    }\r\n                    catch (err) {\r\n                        reject(err);\r\n                    }\r\n                }\r\n            };\r\n            //Microsoft Graph ME Endpoint: https://docs.microsoft.com/en-us/graph/api/user-get?view=graph-rest-1.0&tabs=http\r\n            meRequest.open('GET', 'https://graph.microsoft.com/v1.0/me');\r\n            meRequest.setRequestHeader('Authorization', `Bearer ${loginResponse.accessToken}`);\r\n            try {\r\n                meRequest.send();\r\n            }\r\n            catch (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    }\r\n    getLoginStatus() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const accounts = this._instance.getAllAccounts();\r\n            if ((accounts === null || accounts === void 0 ? void 0 : accounts.length) > 0) {\r\n                const loginResponse = yield this._instance.ssoSilent({\r\n                    scopes: this.initOptions.scopes,\r\n                    loginHint: accounts[0].username\r\n                });\r\n                return yield this.getSocialUser(loginResponse);\r\n            }\r\n            else {\r\n                throw `No user is currently logged in with ${MicrosoftLoginProvider.PROVIDER_ID}`;\r\n            }\r\n        });\r\n    }\r\n    signIn() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const loginResponse = yield this._instance.loginPopup({\r\n                scopes: this.initOptions.scopes,\r\n                prompt: this.initOptions.prompt,\r\n            });\r\n            return yield this.getSocialUser(loginResponse);\r\n        });\r\n    }\r\n    signOut(revoke) {\r\n        var _a, _b;\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const accounts = this._instance.getAllAccounts();\r\n            if ((accounts === null || accounts === void 0 ? void 0 : accounts.length) > 0) {\r\n                yield this._instance.logoutPopup({\r\n                    account: accounts[0],\r\n                    postLogoutRedirectUri: (_b = (_a = this.initOptions.logout_redirect_uri) !== null && _a !== void 0 ? _a : this.initOptions.redirect_uri) !== null && _b !== void 0 ? _b : location.href\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\nMicrosoftLoginProvider.PROVIDER_ID = 'MICROSOFT';\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { AmazonLoginProvider, BaseLoginProvider, DummyLoginProvider, FacebookLoginProvider, GoogleLoginProvider, GoogleSigninButtonDirective, MicrosoftLoginProvider, SocialAuthService, SocialLoginModule, SocialUser, VKLoginProvider };\n"]},"metadata":{},"sourceType":"module"}